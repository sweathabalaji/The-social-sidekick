{"ast":null,"code":"import _objectSpread from\"/Users/apple/Desktop/HOGIST PROJECT/Social_media_automation_final_igfb/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";/**\n * Utility functions for handling date formatting and parsing\n */import moment from'moment-timezone';/**\n * Parse ISO date string with support for various timezone formats\n * Specifically handles the format issue: '2025-06-14T01:30:09+0000'\n * \n * @param {string} dateString - ISO date string\n * @returns {Date|null} - Parsed date or null if invalid\n */export const parseISODate=dateString=>{if(!dateString)return null;try{// Handle +0000 timezone format (convert to Z format)\nconst normalizedDateString=dateString.replace(/\\+0000$/,'Z');return new Date(normalizedDateString);}catch(error){console.error('Error parsing ISO date:',error,dateString);return null;}};/**\n * Format a date string to local date and time\n * \n * @param {string} dateString - ISO date string \n * @param {object} options - Formatting options (Intl.DateTimeFormat options)\n * @returns {string} - Formatted date string\n */export const formatLocalDateTime=function(dateString){let options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};if(!dateString)return'N/A';const defaultOptions=_objectSpread({year:'numeric',month:'short',day:'numeric',hour:'2-digit',minute:'2-digit',hour12:true},options);try{const date=parseISODate(dateString);if(!date)return'Invalid Date';return new Intl.DateTimeFormat('en-US',defaultOptions).format(date);}catch(error){console.error('Error formatting date:',error,dateString);return dateString;// Return original string if parsing fails\n}};/**\n * Format a date to ISO string compatible with the backend\n * \n * @param {Date} date - Date object\n * @returns {string} - ISO date string\n */export const formatToISO=date=>{if(!date)return null;try{return date.toISOString();}catch(error){console.error('Error formatting to ISO:',error);return null;}};/**\n * Convert date to IST timezone and format as ISO string\n * \n * @param {Date} date - Date object\n * @returns {string} - ISO date string in IST timezone\n */export const formatToISTISO=date=>{if(!date)return null;try{return moment(date).tz('Asia/Kolkata').format();}catch(error){console.error('Error formatting to IST ISO:',error);return null;}};/**\n * Get current IST time\n * \n * @returns {moment.Moment} - Current time in IST\n */export const getCurrentIST=()=>{return moment().tz('Asia/Kolkata');};/**\n * Convert date to IST and format for display\n * \n * @param {Date|string} date - Date to format\n * @param {string} format - Format string (default: 'YYYY-MM-DD HH:mm:ss')\n * @returns {string} - Formatted date string in IST\n */export const formatToIST=function(date){let format=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'YYYY-MM-DD HH:mm:ss';if(!date)return'N/A';try{return moment(date).tz('Asia/Kolkata').format(format);}catch(error){console.error('Error formatting to IST:',error);return'Invalid Date';}};/**\n * Check if a date is in the future (IST timezone)\n * \n * @param {Date|string} date - Date to check\n * @param {number} marginMinutes - Minutes of margin to consider (default: 0)\n * @returns {boolean} - True if date is in the future\n */export const isFutureDateIST=function(date){let marginMinutes=arguments.length>1&&arguments[1]!==undefined?arguments[1]:0;if(!date)return false;try{const dateIST=moment(date).tz('Asia/Kolkata');const nowIST=moment().tz('Asia/Kolkata').subtract(marginMinutes,'minutes');return dateIST.isAfter(nowIST);}catch(error){console.error('Error checking future date in IST:',error);return false;}};/**\n * Determine if a date is in the future\n * \n * @param {string|Date} date - Date to check\n * @param {number} marginMinutes - Minutes of margin to consider (default: 0)\n * @returns {boolean} - True if date is in the future\n */export const isFutureDate=function(date){let marginMinutes=arguments.length>1&&arguments[1]!==undefined?arguments[1]:0;if(!date)return false;try{const dateObj=date instanceof Date?date:parseISODate(date);if(!dateObj)return false;const now=new Date();// Add margin minutes to now\nnow.setMinutes(now.getMinutes()-marginMinutes);return dateObj>now;}catch(error){console.error('Error checking future date:',error);return false;}};","map":{"version":3,"names":["moment","parseISODate","dateString","normalizedDateString","replace","Date","error","console","formatLocalDateTime","options","arguments","length","undefined","defaultOptions","_objectSpread","year","month","day","hour","minute","hour12","date","Intl","DateTimeFormat","format","formatToISO","toISOString","formatToISTISO","tz","getCurrentIST","formatToIST","isFutureDateIST","marginMinutes","dateIST","nowIST","subtract","isAfter","isFutureDate","dateObj","now","setMinutes","getMinutes"],"sources":["/Users/apple/Desktop/HOGIST PROJECT/Social_media_automation_final_igfb/frontend/src/utils/dateFormatter.js"],"sourcesContent":["/**\n * Utility functions for handling date formatting and parsing\n */\nimport moment from 'moment-timezone';\n\n/**\n * Parse ISO date string with support for various timezone formats\n * Specifically handles the format issue: '2025-06-14T01:30:09+0000'\n * \n * @param {string} dateString - ISO date string\n * @returns {Date|null} - Parsed date or null if invalid\n */\nexport const parseISODate = (dateString) => {\n  if (!dateString) return null;\n  \n  try {\n    // Handle +0000 timezone format (convert to Z format)\n    const normalizedDateString = dateString.replace(/\\+0000$/, 'Z');\n    return new Date(normalizedDateString);\n  } catch (error) {\n    console.error('Error parsing ISO date:', error, dateString);\n    return null;\n  }\n};\n\n/**\n * Format a date string to local date and time\n * \n * @param {string} dateString - ISO date string \n * @param {object} options - Formatting options (Intl.DateTimeFormat options)\n * @returns {string} - Formatted date string\n */\nexport const formatLocalDateTime = (dateString, options = {}) => {\n  if (!dateString) return 'N/A';\n  \n  const defaultOptions = {\n    year: 'numeric',\n    month: 'short',\n    day: 'numeric',\n    hour: '2-digit',\n    minute: '2-digit',\n    hour12: true,\n    ...options\n  };\n  \n  try {\n    const date = parseISODate(dateString);\n    if (!date) return 'Invalid Date';\n    return new Intl.DateTimeFormat('en-US', defaultOptions).format(date);\n  } catch (error) {\n    console.error('Error formatting date:', error, dateString);\n    return dateString; // Return original string if parsing fails\n  }\n};\n\n/**\n * Format a date to ISO string compatible with the backend\n * \n * @param {Date} date - Date object\n * @returns {string} - ISO date string\n */\nexport const formatToISO = (date) => {\n  if (!date) return null;\n  \n  try {\n    return date.toISOString();\n  } catch (error) {\n    console.error('Error formatting to ISO:', error);\n    return null;\n  }\n};\n\n/**\n * Convert date to IST timezone and format as ISO string\n * \n * @param {Date} date - Date object\n * @returns {string} - ISO date string in IST timezone\n */\nexport const formatToISTISO = (date) => {\n  if (!date) return null;\n  \n  try {\n    return moment(date).tz('Asia/Kolkata').format();\n  } catch (error) {\n    console.error('Error formatting to IST ISO:', error);\n    return null;\n  }\n};\n\n/**\n * Get current IST time\n * \n * @returns {moment.Moment} - Current time in IST\n */\nexport const getCurrentIST = () => {\n  return moment().tz('Asia/Kolkata');\n};\n\n/**\n * Convert date to IST and format for display\n * \n * @param {Date|string} date - Date to format\n * @param {string} format - Format string (default: 'YYYY-MM-DD HH:mm:ss')\n * @returns {string} - Formatted date string in IST\n */\nexport const formatToIST = (date, format = 'YYYY-MM-DD HH:mm:ss') => {\n  if (!date) return 'N/A';\n  \n  try {\n    return moment(date).tz('Asia/Kolkata').format(format);\n  } catch (error) {\n    console.error('Error formatting to IST:', error);\n    return 'Invalid Date';\n  }\n};\n\n/**\n * Check if a date is in the future (IST timezone)\n * \n * @param {Date|string} date - Date to check\n * @param {number} marginMinutes - Minutes of margin to consider (default: 0)\n * @returns {boolean} - True if date is in the future\n */\nexport const isFutureDateIST = (date, marginMinutes = 0) => {\n  if (!date) return false;\n  \n  try {\n    const dateIST = moment(date).tz('Asia/Kolkata');\n    const nowIST = moment().tz('Asia/Kolkata').subtract(marginMinutes, 'minutes');\n    \n    return dateIST.isAfter(nowIST);\n  } catch (error) {\n    console.error('Error checking future date in IST:', error);\n    return false;\n  }\n};\n\n/**\n * Determine if a date is in the future\n * \n * @param {string|Date} date - Date to check\n * @param {number} marginMinutes - Minutes of margin to consider (default: 0)\n * @returns {boolean} - True if date is in the future\n */\nexport const isFutureDate = (date, marginMinutes = 0) => {\n  if (!date) return false;\n  \n  try {\n    const dateObj = date instanceof Date ? date : parseISODate(date);\n    if (!dateObj) return false;\n    \n    const now = new Date();\n    // Add margin minutes to now\n    now.setMinutes(now.getMinutes() - marginMinutes);\n    \n    return dateObj > now;\n  } catch (error) {\n    console.error('Error checking future date:', error);\n    return false;\n  }\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}