{"ast":null,"code":"import React from'react';import ReactDOM from'react-dom/client';import'./index.css';import App from'./App';import{Toaster}from'react-hot-toast';// Add token verification caching\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const TokenCache={tokenStatus:null,lastVerified:null,TTL:30*60*1000,// 30 minutes\nisValid(){if(!this.tokenStatus||!this.lastVerified){return false;}return Date.now()-this.lastVerified<this.TTL;},setStatus(status){this.tokenStatus=status;this.lastVerified=Date.now();}};// Patch the global fetch to cache token verification responses\nconst originalFetch=window.fetch;window.fetch=async function(url,options){// If this is a token verification request and we have a cached result\nif(url.includes('/debug_token')&&TokenCache.isValid()){console.log('Using cached token verification');return new Response(JSON.stringify({data:TokenCache.tokenStatus}),{status:200,headers:{'Content-Type':'application/json'}});}// Otherwise proceed with the original fetch\nconst response=await originalFetch(url,options);// Cache token verification responses\nif(url.includes('/debug_token')&&response.ok){try{// Clone the response to avoid reading it twice\nconst clone=response.clone();const data=await clone.json();TokenCache.setStatus(data.data);}catch(error){console.error('Error caching token status:',error);}}return response;};const root=ReactDOM.createRoot(document.getElementById('root'));root.render(/*#__PURE__*/_jsxs(React.StrictMode,{children:[/*#__PURE__*/_jsx(App,{}),/*#__PURE__*/_jsx(Toaster,{position:\"top-right\"})]}));","map":{"version":3,"names":["React","ReactDOM","App","Toaster","jsx","_jsx","jsxs","_jsxs","TokenCache","tokenStatus","lastVerified","TTL","isValid","Date","now","setStatus","status","originalFetch","window","fetch","url","options","includes","console","log","Response","JSON","stringify","data","headers","response","ok","clone","json","error","root","createRoot","document","getElementById","render","StrictMode","children","position"],"sources":["/Users/apple/Desktop/HOGIST PROJECT/Social_media_automation_final_igfb/frontend/src/index.js"],"sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport { Toaster } from 'react-hot-toast';\n\n// Add token verification caching\nconst TokenCache = {\n  tokenStatus: null,\n  lastVerified: null,\n  TTL: 30 * 60 * 1000, // 30 minutes\n\n  isValid() {\n    if (!this.tokenStatus || !this.lastVerified) {\n      return false;\n    }\n    return (Date.now() - this.lastVerified) < this.TTL;\n  },\n\n  setStatus(status) {\n    this.tokenStatus = status;\n    this.lastVerified = Date.now();\n  }\n};\n\n// Patch the global fetch to cache token verification responses\nconst originalFetch = window.fetch;\nwindow.fetch = async function(url, options) {\n  // If this is a token verification request and we have a cached result\n  if (url.includes('/debug_token') && TokenCache.isValid()) {\n    console.log('Using cached token verification');\n    return new Response(JSON.stringify({ data: TokenCache.tokenStatus }), {\n      status: 200,\n      headers: { 'Content-Type': 'application/json' }\n    });\n  }\n\n  // Otherwise proceed with the original fetch\n  const response = await originalFetch(url, options);\n  \n  // Cache token verification responses\n  if (url.includes('/debug_token') && response.ok) {\n    try {\n      // Clone the response to avoid reading it twice\n      const clone = response.clone();\n      const data = await clone.json();\n      TokenCache.setStatus(data.data);\n    } catch (error) {\n      console.error('Error caching token status:', error);\n    }\n  }\n  \n  return response;\n};\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n    <Toaster position=\"top-right\" />\n  </React.StrictMode>\n);"],"mappings":"AAAA,MAAO,CAAAA,KAAK,KAAM,OAAO,CACzB,MAAO,CAAAC,QAAQ,KAAM,kBAAkB,CACvC,MAAO,aAAa,CACpB,MAAO,CAAAC,GAAG,KAAM,OAAO,CACvB,OAASC,OAAO,KAAQ,iBAAiB,CAEzC;AAAA,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBACA,KAAM,CAAAC,UAAU,CAAG,CACjBC,WAAW,CAAE,IAAI,CACjBC,YAAY,CAAE,IAAI,CAClBC,GAAG,CAAE,EAAE,CAAG,EAAE,CAAG,IAAI,CAAE;AAErBC,OAAOA,CAAA,CAAG,CACR,GAAI,CAAC,IAAI,CAACH,WAAW,EAAI,CAAC,IAAI,CAACC,YAAY,CAAE,CAC3C,MAAO,MAAK,CACd,CACA,MAAQ,CAAAG,IAAI,CAACC,GAAG,CAAC,CAAC,CAAG,IAAI,CAACJ,YAAY,CAAI,IAAI,CAACC,GAAG,CACpD,CAAC,CAEDI,SAASA,CAACC,MAAM,CAAE,CAChB,IAAI,CAACP,WAAW,CAAGO,MAAM,CACzB,IAAI,CAACN,YAAY,CAAGG,IAAI,CAACC,GAAG,CAAC,CAAC,CAChC,CACF,CAAC,CAED;AACA,KAAM,CAAAG,aAAa,CAAGC,MAAM,CAACC,KAAK,CAClCD,MAAM,CAACC,KAAK,CAAG,eAAeC,GAAG,CAAEC,OAAO,CAAE,CAC1C;AACA,GAAID,GAAG,CAACE,QAAQ,CAAC,cAAc,CAAC,EAAId,UAAU,CAACI,OAAO,CAAC,CAAC,CAAE,CACxDW,OAAO,CAACC,GAAG,CAAC,iCAAiC,CAAC,CAC9C,MAAO,IAAI,CAAAC,QAAQ,CAACC,IAAI,CAACC,SAAS,CAAC,CAAEC,IAAI,CAAEpB,UAAU,CAACC,WAAY,CAAC,CAAC,CAAE,CACpEO,MAAM,CAAE,GAAG,CACXa,OAAO,CAAE,CAAE,cAAc,CAAE,kBAAmB,CAChD,CAAC,CAAC,CACJ,CAEA;AACA,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAb,aAAa,CAACG,GAAG,CAAEC,OAAO,CAAC,CAElD;AACA,GAAID,GAAG,CAACE,QAAQ,CAAC,cAAc,CAAC,EAAIQ,QAAQ,CAACC,EAAE,CAAE,CAC/C,GAAI,CACF;AACA,KAAM,CAAAC,KAAK,CAAGF,QAAQ,CAACE,KAAK,CAAC,CAAC,CAC9B,KAAM,CAAAJ,IAAI,CAAG,KAAM,CAAAI,KAAK,CAACC,IAAI,CAAC,CAAC,CAC/BzB,UAAU,CAACO,SAAS,CAACa,IAAI,CAACA,IAAI,CAAC,CACjC,CAAE,MAAOM,KAAK,CAAE,CACdX,OAAO,CAACW,KAAK,CAAC,6BAA6B,CAAEA,KAAK,CAAC,CACrD,CACF,CAEA,MAAO,CAAAJ,QAAQ,CACjB,CAAC,CAED,KAAM,CAAAK,IAAI,CAAGlC,QAAQ,CAACmC,UAAU,CAACC,QAAQ,CAACC,cAAc,CAAC,MAAM,CAAC,CAAC,CACjEH,IAAI,CAACI,MAAM,cACThC,KAAA,CAACP,KAAK,CAACwC,UAAU,EAAAC,QAAA,eACfpC,IAAA,CAACH,GAAG,GAAE,CAAC,cACPG,IAAA,CAACF,OAAO,EAACuC,QAAQ,CAAC,WAAW,CAAE,CAAC,EAChB,CACpB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}