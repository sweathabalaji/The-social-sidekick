{"ast":null,"code":"import{authAPI}from'./api';class AuthService{constructor(){this.sessionId=localStorage.getItem('sessionId');this.user=JSON.parse(localStorage.getItem('user')||'null');}async login(email,password){try{// Basic client-side validation\nif(!email||!password){return{success:false,error:'Please enter both email and password.'};}if(!email.includes('@')){return{success:false,error:'Please enter a valid email address.'};}const response=await authAPI.login({email:email.trim(),password});const{session_id,user,message}=response.data;this.setSession(session_id,user);return{success:true,user,message:message||'Login successful!'};}catch(error){console.error('Login error:',error);if(error.response){var _error$response$data;// Server responded with error status\nconst status=error.response.status;const detail=(_error$response$data=error.response.data)===null||_error$response$data===void 0?void 0:_error$response$data.detail;if(status===401){// Unauthorized - wrong credentials\nreturn{success:false,error:detail||'Invalid email or password.'};}else if(status===400){// Bad request - validation error\nreturn{success:false,error:detail||'Please check your input and try again.'};}else if(status===500){// Server error\nreturn{success:false,error:detail||'Server error. Please try again later.'};}else{return{success:false,error:detail||'Login failed. Please try again.'};}}else if(error.request){// Network error\nreturn{success:false,error:'Network error. Please check your internet connection and try again.'};}else{// Other error\nreturn{success:false,error:'An unexpected error occurred. Please try again.'};}}}async register(userData){try{// Basic client-side validation\nif(!userData.email||!userData.password){return{success:false,error:'Please enter both email and password.'};}if(!userData.email.includes('@')){return{success:false,error:'Please enter a valid email address.'};}if(userData.password.length<6){return{success:false,error:'Password must be at least 6 characters long.'};}const response=await authAPI.register({email:userData.email.trim(),password:userData.password});const{session_id,user,message}=response.data;this.setSession(session_id,user);return{success:true,user,message:message||'Account created successfully!'};}catch(error){console.error('Registration error:',error);if(error.response){var _error$response$data2;// Server responded with error status\nconst status=error.response.status;const detail=(_error$response$data2=error.response.data)===null||_error$response$data2===void 0?void 0:_error$response$data2.detail;if(status===400){// Bad request - validation error or email exists\nreturn{success:false,error:detail||'Please check your input and try again.'};}else if(status===500){// Server error\nreturn{success:false,error:detail||'Server error. Please try again later.'};}else{return{success:false,error:detail||'Registration failed. Please try again.'};}}else if(error.request){// Network error\nreturn{success:false,error:'Network error. Please check your internet connection and try again.'};}else{// Other error\nreturn{success:false,error:'An unexpected error occurred. Please try again.'};}}}logout(){if(this.sessionId){// Call logout API to remove session from database\nauthAPI.logout(this.sessionId).catch(err=>{console.error('Logout API error:',err);// Don't show error to user for logout\n});}this.clearSession();window.location.href='/login';}setSession(sessionId,user){this.sessionId=sessionId;this.user=user;localStorage.setItem('sessionId',sessionId);localStorage.setItem('user',JSON.stringify(user));}clearSession(){this.sessionId=null;this.user=null;localStorage.removeItem('sessionId');localStorage.removeItem('user');}isAuthenticated(){return!!this.sessionId;}getSessionId(){return this.sessionId;}getUser(){return this.user;}async verifySession(){if(!this.sessionId)return false;try{const response=await authAPI.verifySession(this.sessionId);if(response.data.user){// Update user data if needed\nthis.user=response.data.user;localStorage.setItem('user',JSON.stringify(this.user));return true;}return false;}catch(error){console.error('Session verification failed:',error);this.clearSession();return false;}}}const authService=new AuthService();export default authService;","map":{"version":3,"names":["authAPI","AuthService","constructor","sessionId","localStorage","getItem","user","JSON","parse","login","email","password","success","error","includes","response","trim","session_id","message","data","setSession","console","_error$response$data","status","detail","request","register","userData","length","_error$response$data2","logout","catch","err","clearSession","window","location","href","setItem","stringify","removeItem","isAuthenticated","getSessionId","getUser","verifySession","authService"],"sources":["/Users/apple/Desktop/HOGIST PROJECT/Social_media_automation_final_igfb/frontend/src/services/auth.js"],"sourcesContent":["import { authAPI } from './api';\n\nclass AuthService {\n  constructor() {\n    this.sessionId = localStorage.getItem('sessionId');\n    this.user = JSON.parse(localStorage.getItem('user') || 'null');\n  }\n\n  async login(email, password) {\n    try {\n      // Basic client-side validation\n      if (!email || !password) {\n        return { \n          success: false, \n          error: 'Please enter both email and password.' \n        };\n      }\n\n      if (!email.includes('@')) {\n        return { \n          success: false, \n          error: 'Please enter a valid email address.' \n        };\n      }\n\n      const response = await authAPI.login({ email: email.trim(), password });\n      const { session_id, user, message } = response.data;\n      \n      this.setSession(session_id, user);\n      return { \n        success: true, \n        user, \n        message: message || 'Login successful!' \n      };\n    } catch (error) {\n      console.error('Login error:', error);\n      \n      if (error.response) {\n        // Server responded with error status\n        const status = error.response.status;\n        const detail = error.response.data?.detail;\n        \n        if (status === 401) {\n          // Unauthorized - wrong credentials\n          return { \n            success: false, \n            error: detail || 'Invalid email or password.' \n          };\n        } else if (status === 400) {\n          // Bad request - validation error\n          return { \n            success: false, \n            error: detail || 'Please check your input and try again.' \n          };\n        } else if (status === 500) {\n          // Server error\n          return { \n            success: false, \n            error: detail || 'Server error. Please try again later.' \n          };\n        } else {\n          return { \n            success: false, \n            error: detail || 'Login failed. Please try again.' \n          };\n        }\n      } else if (error.request) {\n        // Network error\n        return { \n          success: false, \n          error: 'Network error. Please check your internet connection and try again.' \n        };\n      } else {\n        // Other error\n        return { \n          success: false, \n          error: 'An unexpected error occurred. Please try again.' \n        };\n      }\n    }\n  }\n\n  async register(userData) {\n    try {\n      // Basic client-side validation\n      if (!userData.email || !userData.password) {\n        return { \n          success: false, \n          error: 'Please enter both email and password.' \n        };\n      }\n\n      if (!userData.email.includes('@')) {\n        return { \n          success: false, \n          error: 'Please enter a valid email address.' \n        };\n      }\n\n      if (userData.password.length < 6) {\n        return { \n          success: false, \n          error: 'Password must be at least 6 characters long.' \n        };\n      }\n\n      const response = await authAPI.register({\n        email: userData.email.trim(),\n        password: userData.password\n      });\n      const { session_id, user, message } = response.data;\n      \n      this.setSession(session_id, user);\n      return { \n        success: true, \n        user, \n        message: message || 'Account created successfully!' \n      };\n    } catch (error) {\n      console.error('Registration error:', error);\n      \n      if (error.response) {\n        // Server responded with error status\n        const status = error.response.status;\n        const detail = error.response.data?.detail;\n        \n        if (status === 400) {\n          // Bad request - validation error or email exists\n          return { \n            success: false, \n            error: detail || 'Please check your input and try again.' \n          };\n        } else if (status === 500) {\n          // Server error\n          return { \n            success: false, \n            error: detail || 'Server error. Please try again later.' \n          };\n        } else {\n          return { \n            success: false, \n            error: detail || 'Registration failed. Please try again.' \n          };\n        }\n      } else if (error.request) {\n        // Network error\n        return { \n          success: false, \n          error: 'Network error. Please check your internet connection and try again.' \n        };\n      } else {\n        // Other error\n        return { \n          success: false, \n          error: 'An unexpected error occurred. Please try again.' \n        };\n      }\n    }\n  }\n\n  logout() {\n    if (this.sessionId) {\n      // Call logout API to remove session from database\n      authAPI.logout(this.sessionId).catch(err => {\n        console.error('Logout API error:', err);\n        // Don't show error to user for logout\n      });\n    }\n    this.clearSession();\n    window.location.href = '/login';\n  }\n\n  setSession(sessionId, user) {\n    this.sessionId = sessionId;\n    this.user = user;\n    localStorage.setItem('sessionId', sessionId);\n    localStorage.setItem('user', JSON.stringify(user));\n  }\n\n  clearSession() {\n    this.sessionId = null;\n    this.user = null;\n    localStorage.removeItem('sessionId');\n    localStorage.removeItem('user');\n  }\n\n  isAuthenticated() {\n    return !!this.sessionId;\n  }\n\n  getSessionId() {\n    return this.sessionId;\n  }\n\n  getUser() {\n    return this.user;\n  }\n\n  async verifySession() {\n    if (!this.sessionId) return false;\n    \n    try {\n      const response = await authAPI.verifySession(this.sessionId);\n      if (response.data.user) {\n        // Update user data if needed\n        this.user = response.data.user;\n        localStorage.setItem('user', JSON.stringify(this.user));\n        return true;\n      }\n      return false;\n    } catch (error) {\n      console.error('Session verification failed:', error);\n      this.clearSession();\n      return false;\n    }\n  }\n}\n\nconst authService = new AuthService();\nexport default authService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}