{"ast":null,"code":"import apiClient from '../api';\n\n// Notification Service with Backend Integration\nclass NotificationService {\n  constructor() {\n    this.notifications = [];\n    this.listeners = [];\n    this.isLoading = false;\n    this.lastFetch = null;\n\n    // Initialize with backend data\n    this.loadNotificationsFromBackend();\n\n    // Set up polling for real-time updates\n    this.startPolling();\n  }\n\n  // Load notifications from backend\n  async loadNotificationsFromBackend() {\n    try {\n      var _response$data;\n      this.isLoading = true;\n      const response = await apiClient.get('/api/notifications');\n      if (response !== null && response !== void 0 && (_response$data = response.data) !== null && _response$data !== void 0 && _response$data.notifications) {\n        this.notifications = response.data.notifications.map(notif => ({\n          ...notif,\n          time: this.formatTimeAgo(new Date(notif.timestamp))\n        }));\n        this.lastFetch = new Date();\n        this.notifyListeners();\n      }\n    } catch (error) {\n      console.error('Failed to load notifications:', error);\n      // Fallback to demo data if backend fails\n      this.loadDemoNotifications();\n    } finally {\n      this.isLoading = false;\n    }\n  }\n\n  // Fallback demo notifications\n  loadDemoNotifications() {\n    this.notifications = [{\n      id: 'demo-1',\n      type: 'info',\n      message: 'Welcome to The Social Sidekick! Your notifications will appear here.',\n      read: false,\n      timestamp: new Date(Date.now() - 5 * 60 * 1000),\n      time: '5 minutes ago'\n    }];\n  }\n\n  // Start polling for new notifications\n  startPolling() {\n    // Poll every 30 seconds for new notifications\n    setInterval(async () => {\n      if (!this.isLoading) {\n        await this.loadNotificationsFromBackend();\n      }\n    }, 30000);\n  }\n\n  // Get all notifications\n  getNotifications() {\n    return this.notifications.map(notif => ({\n      ...notif,\n      time: this.formatTimeAgo(new Date(notif.timestamp))\n    }));\n  }\n\n  // Add a new notification (local and backend)\n  async addNotification(type, message) {\n    try {\n      var _response$data2;\n      // Check if we have a session\n      const sessionId = localStorage.getItem('session_id');\n      if (!sessionId) {\n        console.warn('No session found for notification creation');\n        // Fallback: create local-only notification\n        const notification = {\n          id: `local-${Date.now()}`,\n          type,\n          message,\n          read: false,\n          timestamp: new Date(),\n          time: 'Just now'\n        };\n        this.notifications.unshift(notification);\n        this.notifyListeners();\n        return notification;\n      }\n      console.log('Creating notification:', {\n        type,\n        message,\n        sessionId: sessionId.substring(0, 8) + '...'\n      });\n\n      // Add to backend\n      const response = await apiClient.post('/api/notifications', {\n        type,\n        message\n      });\n      if (response !== null && response !== void 0 && (_response$data2 = response.data) !== null && _response$data2 !== void 0 && _response$data2.id) {\n        // Create local notification object\n        const notification = {\n          id: response.data.id,\n          type,\n          message,\n          read: false,\n          timestamp: new Date(),\n          time: 'Just now'\n        };\n\n        // Add to local array\n        this.notifications.unshift(notification);\n        this.notifyListeners();\n        console.log('Notification created successfully:', notification.id);\n        return notification;\n      }\n    } catch (error) {\n      console.error('Failed to create notification:', error);\n\n      // Fallback: create local-only notification\n      const notification = {\n        id: `local-${Date.now()}`,\n        type,\n        message,\n        read: false,\n        timestamp: new Date(),\n        time: 'Just now'\n      };\n      this.notifications.unshift(notification);\n      this.notifyListeners();\n      return notification;\n    }\n  }\n\n  // Mark notification as read\n  async markAsRead(id) {\n    try {\n      // Update backend\n      await apiClient.put(`/api/notifications/${id}/read`);\n\n      // Update local state\n      const notification = this.notifications.find(n => n.id === id);\n      if (notification) {\n        notification.read = true;\n        this.notifyListeners();\n      }\n    } catch (error) {\n      console.error('Failed to mark notification as read:', error);\n\n      // Fallback: update local state only\n      const notification = this.notifications.find(n => n.id === id);\n      if (notification) {\n        notification.read = true;\n        this.notifyListeners();\n      }\n    }\n  }\n\n  // Mark all as read\n  async markAllAsRead() {\n    try {\n      // Update backend\n      await apiClient.put('/api/notifications/mark-all-read');\n\n      // Update local state\n      this.notifications.forEach(n => n.read = true);\n      this.notifyListeners();\n    } catch (error) {\n      console.error('Failed to mark all notifications as read:', error);\n\n      // Fallback: update local state only\n      this.notifications.forEach(n => n.read = true);\n      this.notifyListeners();\n    }\n  }\n\n  // Get unread count\n  getUnreadCount() {\n    return this.notifications.filter(n => !n.read).length;\n  }\n\n  // Subscribe to notification changes\n  subscribe(callback) {\n    this.listeners.push(callback);\n    return () => {\n      this.listeners = this.listeners.filter(listener => listener !== callback);\n    };\n  }\n\n  // Notify all listeners of changes\n  notifyListeners() {\n    this.listeners.forEach(listener => listener(this.getNotifications()));\n  }\n\n  // Refresh notifications from backend\n  async refresh() {\n    await this.loadNotificationsFromBackend();\n  }\n\n  // Helper to format time ago\n  formatTimeAgo(timestamp) {\n    const now = new Date();\n    const diffMs = now - timestamp;\n    const diffMins = Math.floor(diffMs / (1000 * 60));\n    const diffHours = Math.floor(diffMs / (1000 * 60 * 60));\n    const diffDays = Math.floor(diffMs / (1000 * 60 * 60 * 24));\n    if (diffMins < 1) {\n      return 'Just now';\n    } else if (diffMins < 60) {\n      return `${diffMins} minute${diffMins > 1 ? 's' : ''} ago`;\n    } else if (diffHours < 24) {\n      return `${diffHours} hour${diffHours > 1 ? 's' : ''} ago`;\n    } else {\n      return `${diffDays} day${diffDays > 1 ? 's' : ''} ago`;\n    }\n  }\n\n  // Manual method to trigger demo notifications (for testing)\n  addDemoNotification() {\n    const demoMessages = [{\n      type: 'success',\n      message: 'Post successfully scheduled for tomorrow!'\n    }, {\n      type: 'info',\n      message: 'Your weekly analytics report is ready'\n    }, {\n      type: 'warning',\n      message: 'Instagram API rate limit approaching'\n    }, {\n      type: 'success',\n      message: 'New follower milestone reached!'\n    }, {\n      type: 'info',\n      message: 'AI content suggestions updated'\n    }];\n    const randomDemo = demoMessages[Math.floor(Math.random() * demoMessages.length)];\n    this.addNotification(randomDemo.type, randomDemo.message);\n  }\n}\n\n// Create and export singleton instance\nconst notificationService = new NotificationService();\nexport default notificationService;","map":{"version":3,"names":["apiClient","NotificationService","constructor","notifications","listeners","isLoading","lastFetch","loadNotificationsFromBackend","startPolling","_response$data","response","get","data","map","notif","time","formatTimeAgo","Date","timestamp","notifyListeners","error","console","loadDemoNotifications","id","type","message","read","now","setInterval","getNotifications","addNotification","_response$data2","sessionId","localStorage","getItem","warn","notification","unshift","log","substring","post","markAsRead","put","find","n","markAllAsRead","forEach","getUnreadCount","filter","length","subscribe","callback","push","listener","refresh","diffMs","diffMins","Math","floor","diffHours","diffDays","addDemoNotification","demoMessages","randomDemo","random","notificationService"],"sources":["/Users/apple/Desktop/HOGIST PROJECT/Social_media_automation_final_igfb/frontend/src/services/notifications.js"],"sourcesContent":["import apiClient from '../api';\n\n// Notification Service with Backend Integration\nclass NotificationService {\n  constructor() {\n    this.notifications = [];\n    this.listeners = [];\n    this.isLoading = false;\n    this.lastFetch = null;\n    \n    // Initialize with backend data\n    this.loadNotificationsFromBackend();\n    \n    // Set up polling for real-time updates\n    this.startPolling();\n  }\n\n  // Load notifications from backend\n  async loadNotificationsFromBackend() {\n    try {\n      this.isLoading = true;\n      const response = await apiClient.get('/api/notifications');\n      \n      if (response?.data?.notifications) {\n        this.notifications = response.data.notifications.map(notif => ({\n          ...notif,\n          time: this.formatTimeAgo(new Date(notif.timestamp))\n        }));\n        this.lastFetch = new Date();\n        this.notifyListeners();\n      }\n    } catch (error) {\n      console.error('Failed to load notifications:', error);\n      // Fallback to demo data if backend fails\n      this.loadDemoNotifications();\n    } finally {\n      this.isLoading = false;\n    }\n  }\n\n  // Fallback demo notifications\n  loadDemoNotifications() {\n    this.notifications = [\n      {\n        id: 'demo-1',\n        type: 'info',\n        message: 'Welcome to The Social Sidekick! Your notifications will appear here.',\n        read: false,\n        timestamp: new Date(Date.now() - 5 * 60 * 1000),\n        time: '5 minutes ago'\n      }\n    ];\n  }\n\n  // Start polling for new notifications\n  startPolling() {\n    // Poll every 30 seconds for new notifications\n    setInterval(async () => {\n      if (!this.isLoading) {\n        await this.loadNotificationsFromBackend();\n      }\n    }, 30000);\n  }\n\n  // Get all notifications\n  getNotifications() {\n    return this.notifications.map(notif => ({\n      ...notif,\n      time: this.formatTimeAgo(new Date(notif.timestamp))\n    }));\n  }\n\n  // Add a new notification (local and backend)\n  async addNotification(type, message) {\n    try {\n      // Check if we have a session\n      const sessionId = localStorage.getItem('session_id');\n      if (!sessionId) {\n        console.warn('No session found for notification creation');\n        // Fallback: create local-only notification\n        const notification = {\n          id: `local-${Date.now()}`,\n          type,\n          message,\n          read: false,\n          timestamp: new Date(),\n          time: 'Just now'\n        };\n        \n        this.notifications.unshift(notification);\n        this.notifyListeners();\n        \n        return notification;\n      }\n\n      console.log('Creating notification:', { type, message, sessionId: sessionId.substring(0, 8) + '...' });\n      \n      // Add to backend\n      const response = await apiClient.post('/api/notifications', { type, message });\n      \n      if (response?.data?.id) {\n        // Create local notification object\n        const notification = {\n          id: response.data.id,\n          type,\n          message,\n          read: false,\n          timestamp: new Date(),\n          time: 'Just now'\n        };\n        \n        // Add to local array\n        this.notifications.unshift(notification);\n        this.notifyListeners();\n        \n        console.log('Notification created successfully:', notification.id);\n        return notification;\n      }\n    } catch (error) {\n      console.error('Failed to create notification:', error);\n      \n      // Fallback: create local-only notification\n      const notification = {\n        id: `local-${Date.now()}`,\n        type,\n        message,\n        read: false,\n        timestamp: new Date(),\n        time: 'Just now'\n      };\n      \n      this.notifications.unshift(notification);\n      this.notifyListeners();\n      \n      return notification;\n    }\n  }\n\n  // Mark notification as read\n  async markAsRead(id) {\n    try {\n      // Update backend\n      await apiClient.put(`/api/notifications/${id}/read`);\n      \n      // Update local state\n      const notification = this.notifications.find(n => n.id === id);\n      if (notification) {\n        notification.read = true;\n        this.notifyListeners();\n      }\n    } catch (error) {\n      console.error('Failed to mark notification as read:', error);\n      \n      // Fallback: update local state only\n      const notification = this.notifications.find(n => n.id === id);\n      if (notification) {\n        notification.read = true;\n        this.notifyListeners();\n      }\n    }\n  }\n\n  // Mark all as read\n  async markAllAsRead() {\n    try {\n      // Update backend\n      await apiClient.put('/api/notifications/mark-all-read');\n      \n      // Update local state\n      this.notifications.forEach(n => n.read = true);\n      this.notifyListeners();\n    } catch (error) {\n      console.error('Failed to mark all notifications as read:', error);\n      \n      // Fallback: update local state only\n      this.notifications.forEach(n => n.read = true);\n      this.notifyListeners();\n    }\n  }\n\n  // Get unread count\n  getUnreadCount() {\n    return this.notifications.filter(n => !n.read).length;\n  }\n\n  // Subscribe to notification changes\n  subscribe(callback) {\n    this.listeners.push(callback);\n    return () => {\n      this.listeners = this.listeners.filter(listener => listener !== callback);\n    };\n  }\n\n  // Notify all listeners of changes\n  notifyListeners() {\n    this.listeners.forEach(listener => listener(this.getNotifications()));\n  }\n\n  // Refresh notifications from backend\n  async refresh() {\n    await this.loadNotificationsFromBackend();\n  }\n\n  // Helper to format time ago\n  formatTimeAgo(timestamp) {\n    const now = new Date();\n    const diffMs = now - timestamp;\n    const diffMins = Math.floor(diffMs / (1000 * 60));\n    const diffHours = Math.floor(diffMs / (1000 * 60 * 60));\n    const diffDays = Math.floor(diffMs / (1000 * 60 * 60 * 24));\n\n    if (diffMins < 1) {\n      return 'Just now';\n    } else if (diffMins < 60) {\n      return `${diffMins} minute${diffMins > 1 ? 's' : ''} ago`;\n    } else if (diffHours < 24) {\n      return `${diffHours} hour${diffHours > 1 ? 's' : ''} ago`;\n    } else {\n      return `${diffDays} day${diffDays > 1 ? 's' : ''} ago`;\n    }\n  }\n\n  // Manual method to trigger demo notifications (for testing)\n  addDemoNotification() {\n    const demoMessages = [\n      { type: 'success', message: 'Post successfully scheduled for tomorrow!' },\n      { type: 'info', message: 'Your weekly analytics report is ready' },\n      { type: 'warning', message: 'Instagram API rate limit approaching' },\n      { type: 'success', message: 'New follower milestone reached!' },\n      { type: 'info', message: 'AI content suggestions updated' }\n    ];\n\n    const randomDemo = demoMessages[Math.floor(Math.random() * demoMessages.length)];\n    this.addNotification(randomDemo.type, randomDemo.message);\n  }\n}\n\n// Create and export singleton instance\nconst notificationService = new NotificationService();\n\nexport default notificationService; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}