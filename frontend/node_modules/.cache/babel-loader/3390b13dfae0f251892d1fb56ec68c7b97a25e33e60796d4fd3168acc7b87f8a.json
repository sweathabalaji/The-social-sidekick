{"ast":null,"code":"/**\n * Utility functions for handling date formatting and parsing\n */\nimport moment from 'moment-timezone';\n\n/**\n * Parse ISO date string with support for various timezone formats\n * Specifically handles the format issue: '2025-06-14T01:30:09+0000'\n * \n * @param {string} dateString - ISO date string\n * @returns {Date|null} - Parsed date or null if invalid\n */\nexport const parseISODate = dateString => {\n  if (!dateString) return null;\n  try {\n    // Handle +0000 timezone format (convert to Z format)\n    const normalizedDateString = dateString.replace(/\\+0000$/, 'Z');\n    return new Date(normalizedDateString);\n  } catch (error) {\n    console.error('Error parsing ISO date:', error, dateString);\n    return null;\n  }\n};\n\n/**\n * Format a date string to local date and time\n * \n * @param {string} dateString - ISO date string \n * @param {object} options - Formatting options (Intl.DateTimeFormat options)\n * @returns {string} - Formatted date string\n */\nexport const formatLocalDateTime = (dateString, options = {}) => {\n  if (!dateString) return 'N/A';\n  const defaultOptions = {\n    year: 'numeric',\n    month: 'short',\n    day: 'numeric',\n    hour: '2-digit',\n    minute: '2-digit',\n    hour12: true,\n    ...options\n  };\n  try {\n    const date = parseISODate(dateString);\n    if (!date) return 'Invalid Date';\n    return new Intl.DateTimeFormat('en-US', defaultOptions).format(date);\n  } catch (error) {\n    console.error('Error formatting date:', error, dateString);\n    return dateString; // Return original string if parsing fails\n  }\n};\n\n/**\n * Format a date to ISO string compatible with the backend\n * \n * @param {Date} date - Date object\n * @returns {string} - ISO date string\n */\nexport const formatToISO = date => {\n  if (!date) return null;\n  try {\n    return date.toISOString();\n  } catch (error) {\n    console.error('Error formatting to ISO:', error);\n    return null;\n  }\n};\n\n/**\n * Convert date to IST timezone and format as ISO string\n * \n * @param {Date} date - Date object\n * @returns {string} - ISO date string in IST timezone\n */\nexport const formatToISTISO = date => {\n  if (!date) return null;\n  try {\n    return moment(date).tz('Asia/Kolkata').format();\n  } catch (error) {\n    console.error('Error formatting to IST ISO:', error);\n    return null;\n  }\n};\n\n/**\n * Get current IST time\n * \n * @returns {moment.Moment} - Current time in IST\n */\nexport const getCurrentIST = () => {\n  return moment().tz('Asia/Kolkata');\n};\n\n/**\n * Convert date to IST and format for display\n * \n * @param {Date|string} date - Date to format\n * @param {string} format - Format string (default: 'YYYY-MM-DD HH:mm:ss')\n * @returns {string} - Formatted date string in IST\n */\nexport const formatToIST = (date, format = 'YYYY-MM-DD HH:mm:ss') => {\n  if (!date) return 'N/A';\n  try {\n    return moment(date).tz('Asia/Kolkata').format(format);\n  } catch (error) {\n    console.error('Error formatting to IST:', error);\n    return 'Invalid Date';\n  }\n};\n\n/**\n * Check if a date is in the future (IST timezone)\n * \n * @param {Date|string} date - Date to check\n * @param {number} marginMinutes - Minutes of margin to consider (default: 0)\n * @returns {boolean} - True if date is in the future\n */\nexport const isFutureDateIST = (date, marginMinutes = 0) => {\n  if (!date) return false;\n  try {\n    const dateIST = moment(date).tz('Asia/Kolkata');\n    const nowIST = moment().tz('Asia/Kolkata').subtract(marginMinutes, 'minutes');\n    return dateIST.isAfter(nowIST);\n  } catch (error) {\n    console.error('Error checking future date in IST:', error);\n    return false;\n  }\n};\n\n/**\n * Determine if a date is in the future\n * \n * @param {string|Date} date - Date to check\n * @param {number} marginMinutes - Minutes of margin to consider (default: 0)\n * @returns {boolean} - True if date is in the future\n */\nexport const isFutureDate = (date, marginMinutes = 0) => {\n  if (!date) return false;\n  try {\n    const dateObj = date instanceof Date ? date : parseISODate(date);\n    if (!dateObj) return false;\n    const now = new Date();\n    // Add margin minutes to now\n    now.setMinutes(now.getMinutes() - marginMinutes);\n    return dateObj > now;\n  } catch (error) {\n    console.error('Error checking future date:', error);\n    return false;\n  }\n};","map":{"version":3,"names":["moment","parseISODate","dateString","normalizedDateString","replace","Date","error","console","formatLocalDateTime","options","defaultOptions","year","month","day","hour","minute","hour12","date","Intl","DateTimeFormat","format","formatToISO","toISOString","formatToISTISO","tz","getCurrentIST","formatToIST","isFutureDateIST","marginMinutes","dateIST","nowIST","subtract","isAfter","isFutureDate","dateObj","now","setMinutes","getMinutes"],"sources":["/Users/apple/Desktop/HOGIST PROJECT/Social_media_automation_final_igfb/frontend/src/utils/dateFormatter.js"],"sourcesContent":["/**\n * Utility functions for handling date formatting and parsing\n */\nimport moment from 'moment-timezone';\n\n/**\n * Parse ISO date string with support for various timezone formats\n * Specifically handles the format issue: '2025-06-14T01:30:09+0000'\n * \n * @param {string} dateString - ISO date string\n * @returns {Date|null} - Parsed date or null if invalid\n */\nexport const parseISODate = (dateString) => {\n  if (!dateString) return null;\n  \n  try {\n    // Handle +0000 timezone format (convert to Z format)\n    const normalizedDateString = dateString.replace(/\\+0000$/, 'Z');\n    return new Date(normalizedDateString);\n  } catch (error) {\n    console.error('Error parsing ISO date:', error, dateString);\n    return null;\n  }\n};\n\n/**\n * Format a date string to local date and time\n * \n * @param {string} dateString - ISO date string \n * @param {object} options - Formatting options (Intl.DateTimeFormat options)\n * @returns {string} - Formatted date string\n */\nexport const formatLocalDateTime = (dateString, options = {}) => {\n  if (!dateString) return 'N/A';\n  \n  const defaultOptions = {\n    year: 'numeric',\n    month: 'short',\n    day: 'numeric',\n    hour: '2-digit',\n    minute: '2-digit',\n    hour12: true,\n    ...options\n  };\n  \n  try {\n    const date = parseISODate(dateString);\n    if (!date) return 'Invalid Date';\n    return new Intl.DateTimeFormat('en-US', defaultOptions).format(date);\n  } catch (error) {\n    console.error('Error formatting date:', error, dateString);\n    return dateString; // Return original string if parsing fails\n  }\n};\n\n/**\n * Format a date to ISO string compatible with the backend\n * \n * @param {Date} date - Date object\n * @returns {string} - ISO date string\n */\nexport const formatToISO = (date) => {\n  if (!date) return null;\n  \n  try {\n    return date.toISOString();\n  } catch (error) {\n    console.error('Error formatting to ISO:', error);\n    return null;\n  }\n};\n\n/**\n * Convert date to IST timezone and format as ISO string\n * \n * @param {Date} date - Date object\n * @returns {string} - ISO date string in IST timezone\n */\nexport const formatToISTISO = (date) => {\n  if (!date) return null;\n  \n  try {\n    return moment(date).tz('Asia/Kolkata').format();\n  } catch (error) {\n    console.error('Error formatting to IST ISO:', error);\n    return null;\n  }\n};\n\n/**\n * Get current IST time\n * \n * @returns {moment.Moment} - Current time in IST\n */\nexport const getCurrentIST = () => {\n  return moment().tz('Asia/Kolkata');\n};\n\n/**\n * Convert date to IST and format for display\n * \n * @param {Date|string} date - Date to format\n * @param {string} format - Format string (default: 'YYYY-MM-DD HH:mm:ss')\n * @returns {string} - Formatted date string in IST\n */\nexport const formatToIST = (date, format = 'YYYY-MM-DD HH:mm:ss') => {\n  if (!date) return 'N/A';\n  \n  try {\n    return moment(date).tz('Asia/Kolkata').format(format);\n  } catch (error) {\n    console.error('Error formatting to IST:', error);\n    return 'Invalid Date';\n  }\n};\n\n/**\n * Check if a date is in the future (IST timezone)\n * \n * @param {Date|string} date - Date to check\n * @param {number} marginMinutes - Minutes of margin to consider (default: 0)\n * @returns {boolean} - True if date is in the future\n */\nexport const isFutureDateIST = (date, marginMinutes = 0) => {\n  if (!date) return false;\n  \n  try {\n    const dateIST = moment(date).tz('Asia/Kolkata');\n    const nowIST = moment().tz('Asia/Kolkata').subtract(marginMinutes, 'minutes');\n    \n    return dateIST.isAfter(nowIST);\n  } catch (error) {\n    console.error('Error checking future date in IST:', error);\n    return false;\n  }\n};\n\n/**\n * Determine if a date is in the future\n * \n * @param {string|Date} date - Date to check\n * @param {number} marginMinutes - Minutes of margin to consider (default: 0)\n * @returns {boolean} - True if date is in the future\n */\nexport const isFutureDate = (date, marginMinutes = 0) => {\n  if (!date) return false;\n  \n  try {\n    const dateObj = date instanceof Date ? date : parseISODate(date);\n    if (!dateObj) return false;\n    \n    const now = new Date();\n    // Add margin minutes to now\n    now.setMinutes(now.getMinutes() - marginMinutes);\n    \n    return dateObj > now;\n  } catch (error) {\n    console.error('Error checking future date:', error);\n    return false;\n  }\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}