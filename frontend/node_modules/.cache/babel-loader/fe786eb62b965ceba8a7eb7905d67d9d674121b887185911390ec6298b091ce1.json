{"ast":null,"code":"import axios from 'axios';\nimport authService from './auth';\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\n\n// Create axios instance\nconst apiClient = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 30000,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Request interceptor to add session ID\napiClient.interceptors.request.use(config => {\n  const sessionId = authService.getSessionId();\n  if (sessionId) {\n    // Add session_id as query parameter for all requests\n    config.params = {\n      ...config.params,\n      session_id: sessionId\n    };\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Response interceptor to handle authentication errors\napiClient.interceptors.response.use(response => {\n  return response;\n}, error => {\n  if (error.response) {\n    var _error$response$data;\n    const status = error.response.status;\n    const detail = (_error$response$data = error.response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.detail;\n    if (status === 401) {\n      // Session expired or invalid\n      if (detail && detail.includes('session')) {\n        authService.clearSession();\n        // Redirect to login if not already there\n        if (window.location.pathname !== '/login') {\n          window.location.href = '/login';\n        }\n      }\n    } else if (status === 500) {\n      console.error('Server error:', detail);\n    }\n  } else if (error.request) {\n    console.error('Network error:', error.message);\n  } else {\n    console.error('Request error:', error.message);\n  }\n  return Promise.reject(error);\n});\n\n// API functions\nexport const authAPI = {\n  login: credentials => apiClient.post('/auth/login', credentials),\n  register: userData => apiClient.post('/auth/register', userData),\n  verifySession: sessionId => apiClient.get('/auth/verify', {\n    params: {\n      session_id: sessionId\n    }\n  }),\n  logout: sessionId => apiClient.post('/auth/logout', {}, {\n    params: {\n      session_id: sessionId\n    }\n  })\n};\nexport const dashboardAPI = {\n  getDashboardData: () => apiClient.get('/api/dashboard'),\n  getScheduledPosts: () => apiClient.get('/api/scheduled-posts'),\n  getAIContent: () => apiClient.get('/api/ai-content')\n};\nexport const analyticsAPI = {\n  getAnalytics: (platform = 'all', period = '30d') => apiClient.get('/api/analytics', {\n    params: {\n      platform,\n      period\n    }\n  }),\n  getEngagement: (platform = 'all', period = '30d') => apiClient.get('/api/analytics/engagement', {\n    params: {\n      platform,\n      period\n    }\n  }),\n  getReach: (platform = 'all', period = '30d') => apiClient.get('/api/analytics/reach', {\n    params: {\n      platform,\n      period\n    }\n  }),\n  getSummary: (period = '30d') => apiClient.get('/api/analytics/summary', {\n    params: {\n      period\n    }\n  })\n};\nexport const postsAPI = {\n  getPosts: () => apiClient.get('/api/posts'),\n  createPost: postData => apiClient.post('/api/posts', postData),\n  updatePost: (postId, postData) => apiClient.put(`/api/posts/${postId}`, postData),\n  deletePost: postId => apiClient.delete(`/api/posts/${postId}`),\n  getPostHistory: postId => apiClient.get(`/api/posts/${postId}/history`)\n};\nexport default apiClient;","map":{"version":3,"names":["axios","authService","API_BASE_URL","process","env","REACT_APP_API_URL","apiClient","create","baseURL","timeout","headers","interceptors","request","use","config","sessionId","getSessionId","params","session_id","error","Promise","reject","response","_error$response$data","status","detail","data","includes","clearSession","window","location","pathname","href","console","message","authAPI","login","credentials","post","register","userData","verifySession","get","logout","dashboardAPI","getDashboardData","getScheduledPosts","getAIContent","analyticsAPI","getAnalytics","platform","period","getEngagement","getReach","getSummary","postsAPI","getPosts","createPost","postData","updatePost","postId","put","deletePost","delete","getPostHistory"],"sources":["/Users/apple/Desktop/HOGIST PROJECT/Social_media_automation_final_igfb/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\nimport authService from './auth';\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\n\n// Create axios instance\nconst apiClient = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 30000,\n  headers: {\n    'Content-Type': 'application/json',\n  }\n});\n\n// Request interceptor to add session ID\napiClient.interceptors.request.use(\n  (config) => {\n    const sessionId = authService.getSessionId();\n    if (sessionId) {\n      // Add session_id as query parameter for all requests\n      config.params = {\n        ...config.params,\n        session_id: sessionId\n      };\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// Response interceptor to handle authentication errors\napiClient.interceptors.response.use(\n  (response) => {\n    return response;\n  },\n  (error) => {\n    if (error.response) {\n      const status = error.response.status;\n      const detail = error.response.data?.detail;\n      \n      if (status === 401) {\n        // Session expired or invalid\n        if (detail && detail.includes('session')) {\n          authService.clearSession();\n          // Redirect to login if not already there\n          if (window.location.pathname !== '/login') {\n            window.location.href = '/login';\n          }\n        }\n      } else if (status === 500) {\n        console.error('Server error:', detail);\n      }\n    } else if (error.request) {\n      console.error('Network error:', error.message);\n    } else {\n      console.error('Request error:', error.message);\n    }\n    \n    return Promise.reject(error);\n  }\n);\n\n// API functions\nexport const authAPI = {\n  login: (credentials) => \n    apiClient.post('/auth/login', credentials),\n  \n  register: (userData) => \n    apiClient.post('/auth/register', userData),\n  \n  verifySession: (sessionId) => \n    apiClient.get('/auth/verify', { params: { session_id: sessionId } }),\n  \n  logout: (sessionId) => \n    apiClient.post('/auth/logout', {}, { params: { session_id: sessionId } })\n};\n\nexport const dashboardAPI = {\n  getDashboardData: () => \n    apiClient.get('/api/dashboard'),\n  \n  getScheduledPosts: () => \n    apiClient.get('/api/scheduled-posts'),\n  \n  getAIContent: () => \n    apiClient.get('/api/ai-content')\n};\n\nexport const analyticsAPI = {\n  getAnalytics: (platform = 'all', period = '30d') => \n    apiClient.get('/api/analytics', { params: { platform, period } }),\n  \n  getEngagement: (platform = 'all', period = '30d') => \n    apiClient.get('/api/analytics/engagement', { params: { platform, period } }),\n  \n  getReach: (platform = 'all', period = '30d') => \n    apiClient.get('/api/analytics/reach', { params: { platform, period } }),\n  \n  getSummary: (period = '30d') => \n    apiClient.get('/api/analytics/summary', { params: { period } })\n};\n\nexport const postsAPI = {\n  getPosts: () => \n    apiClient.get('/api/posts'),\n  \n  createPost: (postData) => \n    apiClient.post('/api/posts', postData),\n  \n  updatePost: (postId, postData) => \n    apiClient.put(`/api/posts/${postId}`, postData),\n  \n  deletePost: (postId) => \n    apiClient.delete(`/api/posts/${postId}`),\n  \n  getPostHistory: (postId) => \n    apiClient.get(`/api/posts/${postId}/history`)\n};\n\nexport default apiClient;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}