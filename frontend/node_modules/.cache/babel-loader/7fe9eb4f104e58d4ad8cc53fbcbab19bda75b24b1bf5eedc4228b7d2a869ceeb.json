{"ast":null,"code":"var _jsxFileName = \"/Users/apple/Desktop/HOGIST PROJECT/Social_media_automation_final_igfb/frontend/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport { Toaster } from 'react-hot-toast';\n\n// Add token verification caching\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TokenCache = {\n  tokenStatus: null,\n  lastVerified: null,\n  TTL: 30 * 60 * 1000,\n  // 30 minutes\n\n  isValid() {\n    if (!this.tokenStatus || !this.lastVerified) {\n      return false;\n    }\n    return Date.now() - this.lastVerified < this.TTL;\n  },\n  setStatus(status) {\n    this.tokenStatus = status;\n    this.lastVerified = Date.now();\n  }\n};\n\n// Patch the global fetch to cache token verification responses\nconst originalFetch = window.fetch;\nwindow.fetch = async function (url, options) {\n  // If this is a token verification request and we have a cached result\n  if (url.includes('/debug_token') && TokenCache.isValid()) {\n    console.log('Using cached token verification');\n    return new Response(JSON.stringify({\n      data: TokenCache.tokenStatus\n    }), {\n      status: 200,\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n  }\n\n  // Otherwise proceed with the original fetch\n  const response = await originalFetch(url, options);\n\n  // Cache token verification responses\n  if (url.includes('/debug_token') && response.ok) {\n    try {\n      // Clone the response to avoid reading it twice\n      const clone = response.clone();\n      const data = await clone.json();\n      TokenCache.setStatus(data.data);\n    } catch (error) {\n      console.error('Error caching token status:', error);\n    }\n  }\n  return response;\n};\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(/*#__PURE__*/_jsxDEV(React.StrictMode, {\n  children: [/*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(Toaster, {\n    position: \"top-right\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this)]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 58,\n  columnNumber: 3\n}, this));","map":{"version":3,"names":["React","ReactDOM","App","Toaster","jsxDEV","_jsxDEV","TokenCache","tokenStatus","lastVerified","TTL","isValid","Date","now","setStatus","status","originalFetch","window","fetch","url","options","includes","console","log","Response","JSON","stringify","data","headers","response","ok","clone","json","error","root","createRoot","document","getElementById","render","StrictMode","children","fileName","_jsxFileName","lineNumber","columnNumber","position"],"sources":["/Users/apple/Desktop/HOGIST PROJECT/Social_media_automation_final_igfb/frontend/src/index.js"],"sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport { Toaster } from 'react-hot-toast';\n\n// Add token verification caching\nconst TokenCache = {\n  tokenStatus: null,\n  lastVerified: null,\n  TTL: 30 * 60 * 1000, // 30 minutes\n\n  isValid() {\n    if (!this.tokenStatus || !this.lastVerified) {\n      return false;\n    }\n    return (Date.now() - this.lastVerified) < this.TTL;\n  },\n\n  setStatus(status) {\n    this.tokenStatus = status;\n    this.lastVerified = Date.now();\n  }\n};\n\n// Patch the global fetch to cache token verification responses\nconst originalFetch = window.fetch;\nwindow.fetch = async function(url, options) {\n  // If this is a token verification request and we have a cached result\n  if (url.includes('/debug_token') && TokenCache.isValid()) {\n    console.log('Using cached token verification');\n    return new Response(JSON.stringify({ data: TokenCache.tokenStatus }), {\n      status: 200,\n      headers: { 'Content-Type': 'application/json' }\n    });\n  }\n\n  // Otherwise proceed with the original fetch\n  const response = await originalFetch(url, options);\n  \n  // Cache token verification responses\n  if (url.includes('/debug_token') && response.ok) {\n    try {\n      // Clone the response to avoid reading it twice\n      const clone = response.clone();\n      const data = await clone.json();\n      TokenCache.setStatus(data.data);\n    } catch (error) {\n      console.error('Error caching token status:', error);\n    }\n  }\n  \n  return response;\n};\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n    <Toaster position=\"top-right\" />\n  </React.StrictMode>\n);"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,QAAQ,MAAM,kBAAkB;AACvC,OAAO,aAAa;AACpB,OAAOC,GAAG,MAAM,OAAO;AACvB,SAASC,OAAO,QAAQ,iBAAiB;;AAEzC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,UAAU,GAAG;EACjBC,WAAW,EAAE,IAAI;EACjBC,YAAY,EAAE,IAAI;EAClBC,GAAG,EAAE,EAAE,GAAG,EAAE,GAAG,IAAI;EAAE;;EAErBC,OAAOA,CAAA,EAAG;IACR,IAAI,CAAC,IAAI,CAACH,WAAW,IAAI,CAAC,IAAI,CAACC,YAAY,EAAE;MAC3C,OAAO,KAAK;IACd;IACA,OAAQG,IAAI,CAACC,GAAG,CAAC,CAAC,GAAG,IAAI,CAACJ,YAAY,GAAI,IAAI,CAACC,GAAG;EACpD,CAAC;EAEDI,SAASA,CAACC,MAAM,EAAE;IAChB,IAAI,CAACP,WAAW,GAAGO,MAAM;IACzB,IAAI,CAACN,YAAY,GAAGG,IAAI,CAACC,GAAG,CAAC,CAAC;EAChC;AACF,CAAC;;AAED;AACA,MAAMG,aAAa,GAAGC,MAAM,CAACC,KAAK;AAClCD,MAAM,CAACC,KAAK,GAAG,gBAAeC,GAAG,EAAEC,OAAO,EAAE;EAC1C;EACA,IAAID,GAAG,CAACE,QAAQ,CAAC,cAAc,CAAC,IAAId,UAAU,CAACI,OAAO,CAAC,CAAC,EAAE;IACxDW,OAAO,CAACC,GAAG,CAAC,iCAAiC,CAAC;IAC9C,OAAO,IAAIC,QAAQ,CAACC,IAAI,CAACC,SAAS,CAAC;MAAEC,IAAI,EAAEpB,UAAU,CAACC;IAAY,CAAC,CAAC,EAAE;MACpEO,MAAM,EAAE,GAAG;MACXa,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB;IAChD,CAAC,CAAC;EACJ;;EAEA;EACA,MAAMC,QAAQ,GAAG,MAAMb,aAAa,CAACG,GAAG,EAAEC,OAAO,CAAC;;EAElD;EACA,IAAID,GAAG,CAACE,QAAQ,CAAC,cAAc,CAAC,IAAIQ,QAAQ,CAACC,EAAE,EAAE;IAC/C,IAAI;MACF;MACA,MAAMC,KAAK,GAAGF,QAAQ,CAACE,KAAK,CAAC,CAAC;MAC9B,MAAMJ,IAAI,GAAG,MAAMI,KAAK,CAACC,IAAI,CAAC,CAAC;MAC/BzB,UAAU,CAACO,SAAS,CAACa,IAAI,CAACA,IAAI,CAAC;IACjC,CAAC,CAAC,OAAOM,KAAK,EAAE;MACdX,OAAO,CAACW,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;IACrD;EACF;EAEA,OAAOJ,QAAQ;AACjB,CAAC;AAED,MAAMK,IAAI,GAAGhC,QAAQ,CAACiC,UAAU,CAACC,QAAQ,CAACC,cAAc,CAAC,MAAM,CAAC,CAAC;AACjEH,IAAI,CAACI,MAAM,cACThC,OAAA,CAACL,KAAK,CAACsC,UAAU;EAAAC,QAAA,gBACflC,OAAA,CAACH,GAAG;IAAAsC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC,eACPtC,OAAA,CAACF,OAAO;IAACyC,QAAQ,EAAC;EAAW;IAAAJ,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AAAA;EAAAH,QAAA,EAAAC,YAAA;EAAAC,UAAA;EAAAC,YAAA;AAAA,OAChB,CACpB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}