{"ast":null,"code":"// Notification Service\nclass NotificationService {\n  constructor() {\n    this.notifications = [{\n      id: 1,\n      type: 'success',\n      message: 'Your Instagram post was published successfully!',\n      time: '2 minutes ago',\n      read: false,\n      timestamp: new Date(Date.now() - 2 * 60 * 1000)\n    }, {\n      id: 2,\n      type: 'info',\n      message: 'New analytics data available for this week',\n      time: '1 hour ago',\n      read: false,\n      timestamp: new Date(Date.now() - 60 * 60 * 1000)\n    }, {\n      id: 3,\n      type: 'warning',\n      message: 'Scheduled post needs attention',\n      time: '3 hours ago',\n      read: true,\n      timestamp: new Date(Date.now() - 3 * 60 * 60 * 1000)\n    }];\n    this.listeners = [];\n  }\n\n  // Get all notifications\n  getNotifications() {\n    return this.notifications.map(notif => ({\n      ...notif,\n      time: this.formatTimeAgo(notif.timestamp)\n    }));\n  }\n\n  // Add a new notification\n  addNotification(type, message) {\n    const notification = {\n      id: Date.now(),\n      type,\n      message,\n      read: false,\n      timestamp: new Date()\n    };\n    this.notifications.unshift(notification);\n    this.notifyListeners();\n    return notification;\n  }\n\n  // Mark notification as read\n  markAsRead(id) {\n    const notification = this.notifications.find(n => n.id === id);\n    if (notification) {\n      notification.read = true;\n      this.notifyListeners();\n    }\n  }\n\n  // Mark all as read\n  markAllAsRead() {\n    this.notifications.forEach(n => n.read = true);\n    this.notifyListeners();\n  }\n\n  // Get unread count\n  getUnreadCount() {\n    return this.notifications.filter(n => !n.read).length;\n  }\n\n  // Subscribe to notification changes\n  subscribe(callback) {\n    this.listeners.push(callback);\n    return () => {\n      this.listeners = this.listeners.filter(listener => listener !== callback);\n    };\n  }\n\n  // Notify all listeners of changes\n  notifyListeners() {\n    this.listeners.forEach(listener => listener(this.getNotifications()));\n  }\n\n  // Helper to format time ago\n  formatTimeAgo(timestamp) {\n    const now = new Date();\n    const diffMs = now - timestamp;\n    const diffMins = Math.floor(diffMs / (1000 * 60));\n    const diffHours = Math.floor(diffMs / (1000 * 60 * 60));\n    const diffDays = Math.floor(diffMs / (1000 * 60 * 60 * 24));\n    if (diffMins < 1) {\n      return 'Just now';\n    } else if (diffMins < 60) {\n      return `${diffMins} minute${diffMins > 1 ? 's' : ''} ago`;\n    } else if (diffHours < 24) {\n      return `${diffHours} hour${diffHours > 1 ? 's' : ''} ago`;\n    } else {\n      return `${diffDays} day${diffDays > 1 ? 's' : ''} ago`;\n    }\n  }\n\n  // Simulate receiving notifications for demo\n  simulateNotifications() {\n    const notifications = [{\n      type: 'success',\n      message: 'Post successfully scheduled for tomorrow!'\n    }, {\n      type: 'info',\n      message: 'Your weekly analytics report is ready'\n    }, {\n      type: 'warning',\n      message: 'Instagram API rate limit approaching'\n    }, {\n      type: 'success',\n      message: 'New follower milestone reached: 1K followers!'\n    }, {\n      type: 'info',\n      message: 'AI content suggestions updated'\n    }];\n\n    // Add a random notification every 30 seconds (for demo)\n    setInterval(() => {\n      const randomNotif = notifications[Math.floor(Math.random() * notifications.length)];\n      this.addNotification(randomNotif.type, randomNotif.message);\n    }, 30000);\n  }\n}\n\n// Create and export singleton instance\nconst notificationService = new NotificationService();\n\n// Start simulation (you can remove this in production)\n// notificationService.simulateNotifications();\n\nexport default notificationService;","map":{"version":3,"names":["NotificationService","constructor","notifications","id","type","message","time","read","timestamp","Date","now","listeners","getNotifications","map","notif","formatTimeAgo","addNotification","notification","unshift","notifyListeners","markAsRead","find","n","markAllAsRead","forEach","getUnreadCount","filter","length","subscribe","callback","push","listener","diffMs","diffMins","Math","floor","diffHours","diffDays","simulateNotifications","setInterval","randomNotif","random","notificationService"],"sources":["/Users/apple/Desktop/HOGIST PROJECT/Social_media_automation_final_igfb/frontend/src/services/notifications.js"],"sourcesContent":["// Notification Service\nclass NotificationService {\n  constructor() {\n    this.notifications = [\n      {\n        id: 1,\n        type: 'success',\n        message: 'Your Instagram post was published successfully!',\n        time: '2 minutes ago',\n        read: false,\n        timestamp: new Date(Date.now() - 2 * 60 * 1000)\n      },\n      {\n        id: 2,\n        type: 'info',\n        message: 'New analytics data available for this week',\n        time: '1 hour ago',\n        read: false,\n        timestamp: new Date(Date.now() - 60 * 60 * 1000)\n      },\n      {\n        id: 3,\n        type: 'warning',\n        message: 'Scheduled post needs attention',\n        time: '3 hours ago',\n        read: true,\n        timestamp: new Date(Date.now() - 3 * 60 * 60 * 1000)\n      }\n    ];\n    this.listeners = [];\n  }\n\n  // Get all notifications\n  getNotifications() {\n    return this.notifications.map(notif => ({\n      ...notif,\n      time: this.formatTimeAgo(notif.timestamp)\n    }));\n  }\n\n  // Add a new notification\n  addNotification(type, message) {\n    const notification = {\n      id: Date.now(),\n      type,\n      message,\n      read: false,\n      timestamp: new Date()\n    };\n    \n    this.notifications.unshift(notification);\n    this.notifyListeners();\n    \n    return notification;\n  }\n\n  // Mark notification as read\n  markAsRead(id) {\n    const notification = this.notifications.find(n => n.id === id);\n    if (notification) {\n      notification.read = true;\n      this.notifyListeners();\n    }\n  }\n\n  // Mark all as read\n  markAllAsRead() {\n    this.notifications.forEach(n => n.read = true);\n    this.notifyListeners();\n  }\n\n  // Get unread count\n  getUnreadCount() {\n    return this.notifications.filter(n => !n.read).length;\n  }\n\n  // Subscribe to notification changes\n  subscribe(callback) {\n    this.listeners.push(callback);\n    return () => {\n      this.listeners = this.listeners.filter(listener => listener !== callback);\n    };\n  }\n\n  // Notify all listeners of changes\n  notifyListeners() {\n    this.listeners.forEach(listener => listener(this.getNotifications()));\n  }\n\n  // Helper to format time ago\n  formatTimeAgo(timestamp) {\n    const now = new Date();\n    const diffMs = now - timestamp;\n    const diffMins = Math.floor(diffMs / (1000 * 60));\n    const diffHours = Math.floor(diffMs / (1000 * 60 * 60));\n    const diffDays = Math.floor(diffMs / (1000 * 60 * 60 * 24));\n\n    if (diffMins < 1) {\n      return 'Just now';\n    } else if (diffMins < 60) {\n      return `${diffMins} minute${diffMins > 1 ? 's' : ''} ago`;\n    } else if (diffHours < 24) {\n      return `${diffHours} hour${diffHours > 1 ? 's' : ''} ago`;\n    } else {\n      return `${diffDays} day${diffDays > 1 ? 's' : ''} ago`;\n    }\n  }\n\n  // Simulate receiving notifications for demo\n  simulateNotifications() {\n    const notifications = [\n      { type: 'success', message: 'Post successfully scheduled for tomorrow!' },\n      { type: 'info', message: 'Your weekly analytics report is ready' },\n      { type: 'warning', message: 'Instagram API rate limit approaching' },\n      { type: 'success', message: 'New follower milestone reached: 1K followers!' },\n      { type: 'info', message: 'AI content suggestions updated' }\n    ];\n\n    // Add a random notification every 30 seconds (for demo)\n    setInterval(() => {\n      const randomNotif = notifications[Math.floor(Math.random() * notifications.length)];\n      this.addNotification(randomNotif.type, randomNotif.message);\n    }, 30000);\n  }\n}\n\n// Create and export singleton instance\nconst notificationService = new NotificationService();\n\n// Start simulation (you can remove this in production)\n// notificationService.simulateNotifications();\n\nexport default notificationService; "],"mappings":"AAAA;AACA,MAAMA,mBAAmB,CAAC;EACxBC,WAAWA,CAAA,EAAG;IACZ,IAAI,CAACC,aAAa,GAAG,CACnB;MACEC,EAAE,EAAE,CAAC;MACLC,IAAI,EAAE,SAAS;MACfC,OAAO,EAAE,iDAAiD;MAC1DC,IAAI,EAAE,eAAe;MACrBC,IAAI,EAAE,KAAK;MACXC,SAAS,EAAE,IAAIC,IAAI,CAACA,IAAI,CAACC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,IAAI;IAChD,CAAC,EACD;MACEP,EAAE,EAAE,CAAC;MACLC,IAAI,EAAE,MAAM;MACZC,OAAO,EAAE,4CAA4C;MACrDC,IAAI,EAAE,YAAY;MAClBC,IAAI,EAAE,KAAK;MACXC,SAAS,EAAE,IAAIC,IAAI,CAACA,IAAI,CAACC,GAAG,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI;IACjD,CAAC,EACD;MACEP,EAAE,EAAE,CAAC;MACLC,IAAI,EAAE,SAAS;MACfC,OAAO,EAAE,gCAAgC;MACzCC,IAAI,EAAE,aAAa;MACnBC,IAAI,EAAE,IAAI;MACVC,SAAS,EAAE,IAAIC,IAAI,CAACA,IAAI,CAACC,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI;IACrD,CAAC,CACF;IACD,IAAI,CAACC,SAAS,GAAG,EAAE;EACrB;;EAEA;EACAC,gBAAgBA,CAAA,EAAG;IACjB,OAAO,IAAI,CAACV,aAAa,CAACW,GAAG,CAACC,KAAK,KAAK;MACtC,GAAGA,KAAK;MACRR,IAAI,EAAE,IAAI,CAACS,aAAa,CAACD,KAAK,CAACN,SAAS;IAC1C,CAAC,CAAC,CAAC;EACL;;EAEA;EACAQ,eAAeA,CAACZ,IAAI,EAAEC,OAAO,EAAE;IAC7B,MAAMY,YAAY,GAAG;MACnBd,EAAE,EAAEM,IAAI,CAACC,GAAG,CAAC,CAAC;MACdN,IAAI;MACJC,OAAO;MACPE,IAAI,EAAE,KAAK;MACXC,SAAS,EAAE,IAAIC,IAAI,CAAC;IACtB,CAAC;IAED,IAAI,CAACP,aAAa,CAACgB,OAAO,CAACD,YAAY,CAAC;IACxC,IAAI,CAACE,eAAe,CAAC,CAAC;IAEtB,OAAOF,YAAY;EACrB;;EAEA;EACAG,UAAUA,CAACjB,EAAE,EAAE;IACb,MAAMc,YAAY,GAAG,IAAI,CAACf,aAAa,CAACmB,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACnB,EAAE,KAAKA,EAAE,CAAC;IAC9D,IAAIc,YAAY,EAAE;MAChBA,YAAY,CAACV,IAAI,GAAG,IAAI;MACxB,IAAI,CAACY,eAAe,CAAC,CAAC;IACxB;EACF;;EAEA;EACAI,aAAaA,CAAA,EAAG;IACd,IAAI,CAACrB,aAAa,CAACsB,OAAO,CAACF,CAAC,IAAIA,CAAC,CAACf,IAAI,GAAG,IAAI,CAAC;IAC9C,IAAI,CAACY,eAAe,CAAC,CAAC;EACxB;;EAEA;EACAM,cAAcA,CAAA,EAAG;IACf,OAAO,IAAI,CAACvB,aAAa,CAACwB,MAAM,CAACJ,CAAC,IAAI,CAACA,CAAC,CAACf,IAAI,CAAC,CAACoB,MAAM;EACvD;;EAEA;EACAC,SAASA,CAACC,QAAQ,EAAE;IAClB,IAAI,CAAClB,SAAS,CAACmB,IAAI,CAACD,QAAQ,CAAC;IAC7B,OAAO,MAAM;MACX,IAAI,CAAClB,SAAS,GAAG,IAAI,CAACA,SAAS,CAACe,MAAM,CAACK,QAAQ,IAAIA,QAAQ,KAAKF,QAAQ,CAAC;IAC3E,CAAC;EACH;;EAEA;EACAV,eAAeA,CAAA,EAAG;IAChB,IAAI,CAACR,SAAS,CAACa,OAAO,CAACO,QAAQ,IAAIA,QAAQ,CAAC,IAAI,CAACnB,gBAAgB,CAAC,CAAC,CAAC,CAAC;EACvE;;EAEA;EACAG,aAAaA,CAACP,SAAS,EAAE;IACvB,MAAME,GAAG,GAAG,IAAID,IAAI,CAAC,CAAC;IACtB,MAAMuB,MAAM,GAAGtB,GAAG,GAAGF,SAAS;IAC9B,MAAMyB,QAAQ,GAAGC,IAAI,CAACC,KAAK,CAACH,MAAM,IAAI,IAAI,GAAG,EAAE,CAAC,CAAC;IACjD,MAAMI,SAAS,GAAGF,IAAI,CAACC,KAAK,CAACH,MAAM,IAAI,IAAI,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC;IACvD,MAAMK,QAAQ,GAAGH,IAAI,CAACC,KAAK,CAACH,MAAM,IAAI,IAAI,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC;IAE3D,IAAIC,QAAQ,GAAG,CAAC,EAAE;MAChB,OAAO,UAAU;IACnB,CAAC,MAAM,IAAIA,QAAQ,GAAG,EAAE,EAAE;MACxB,OAAO,GAAGA,QAAQ,UAAUA,QAAQ,GAAG,CAAC,GAAG,GAAG,GAAG,EAAE,MAAM;IAC3D,CAAC,MAAM,IAAIG,SAAS,GAAG,EAAE,EAAE;MACzB,OAAO,GAAGA,SAAS,QAAQA,SAAS,GAAG,CAAC,GAAG,GAAG,GAAG,EAAE,MAAM;IAC3D,CAAC,MAAM;MACL,OAAO,GAAGC,QAAQ,OAAOA,QAAQ,GAAG,CAAC,GAAG,GAAG,GAAG,EAAE,MAAM;IACxD;EACF;;EAEA;EACAC,qBAAqBA,CAAA,EAAG;IACtB,MAAMpC,aAAa,GAAG,CACpB;MAAEE,IAAI,EAAE,SAAS;MAAEC,OAAO,EAAE;IAA4C,CAAC,EACzE;MAAED,IAAI,EAAE,MAAM;MAAEC,OAAO,EAAE;IAAwC,CAAC,EAClE;MAAED,IAAI,EAAE,SAAS;MAAEC,OAAO,EAAE;IAAuC,CAAC,EACpE;MAAED,IAAI,EAAE,SAAS;MAAEC,OAAO,EAAE;IAAgD,CAAC,EAC7E;MAAED,IAAI,EAAE,MAAM;MAAEC,OAAO,EAAE;IAAiC,CAAC,CAC5D;;IAED;IACAkC,WAAW,CAAC,MAAM;MAChB,MAAMC,WAAW,GAAGtC,aAAa,CAACgC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACO,MAAM,CAAC,CAAC,GAAGvC,aAAa,CAACyB,MAAM,CAAC,CAAC;MACnF,IAAI,CAACX,eAAe,CAACwB,WAAW,CAACpC,IAAI,EAAEoC,WAAW,CAACnC,OAAO,CAAC;IAC7D,CAAC,EAAE,KAAK,CAAC;EACX;AACF;;AAEA;AACA,MAAMqC,mBAAmB,GAAG,IAAI1C,mBAAmB,CAAC,CAAC;;AAErD;AACA;;AAEA,eAAe0C,mBAAmB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}