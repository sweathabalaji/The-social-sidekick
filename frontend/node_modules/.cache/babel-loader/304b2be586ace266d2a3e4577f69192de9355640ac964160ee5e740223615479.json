{"ast":null,"code":"import { authAPI } from './api';\nclass AuthService {\n  constructor() {\n    // Check for both old and new session storage formats\n    this.sessionId = localStorage.getItem('session_id') || localStorage.getItem('sessionId');\n    this.user = JSON.parse(localStorage.getItem('user') || 'null');\n\n    // If we found an old format, migrate it\n    if (!localStorage.getItem('session_id') && localStorage.getItem('sessionId')) {\n      const oldSessionId = localStorage.getItem('sessionId');\n      localStorage.setItem('session_id', oldSessionId);\n      localStorage.removeItem('sessionId');\n    }\n  }\n  async login(email, password) {\n    try {\n      // Basic client-side validation\n      if (!email || !password) {\n        return {\n          success: false,\n          error: 'Please enter both email and password.'\n        };\n      }\n      if (!email.includes('@')) {\n        return {\n          success: false,\n          error: 'Please enter a valid email address.'\n        };\n      }\n      const response = await authAPI.login({\n        email: email.trim(),\n        password\n      });\n      const {\n        session_id,\n        user,\n        message\n      } = response.data;\n      this.setSession(session_id, user);\n      return {\n        success: true,\n        user,\n        message: message || 'Login successful!'\n      };\n    } catch (error) {\n      console.error('Login error:', error);\n      if (error.response) {\n        var _error$response$data;\n        // Server responded with error status\n        const status = error.response.status;\n        const detail = (_error$response$data = error.response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.detail;\n        if (status === 401) {\n          // Unauthorized - wrong credentials\n          return {\n            success: false,\n            error: detail || 'Invalid email or password.'\n          };\n        } else if (status === 400) {\n          // Bad request - validation error\n          return {\n            success: false,\n            error: detail || 'Please check your input and try again.'\n          };\n        } else if (status === 500) {\n          // Server error\n          return {\n            success: false,\n            error: detail || 'Server error. Please try again later.'\n          };\n        } else {\n          return {\n            success: false,\n            error: detail || 'Login failed. Please try again.'\n          };\n        }\n      } else if (error.request) {\n        // Network error\n        return {\n          success: false,\n          error: 'Network error. Please check your internet connection and try again.'\n        };\n      } else {\n        // Other error\n        return {\n          success: false,\n          error: 'An unexpected error occurred. Please try again.'\n        };\n      }\n    }\n  }\n  async register(userData) {\n    try {\n      // Basic client-side validation\n      if (!userData.email || !userData.password) {\n        return {\n          success: false,\n          error: 'Please enter both email and password.'\n        };\n      }\n      if (!userData.email.includes('@')) {\n        return {\n          success: false,\n          error: 'Please enter a valid email address.'\n        };\n      }\n      if (userData.password.length < 6) {\n        return {\n          success: false,\n          error: 'Password must be at least 6 characters long.'\n        };\n      }\n      const response = await authAPI.register({\n        email: userData.email.trim(),\n        password: userData.password\n      });\n      const {\n        session_id,\n        user,\n        message\n      } = response.data;\n      this.setSession(session_id, user);\n      return {\n        success: true,\n        user,\n        message: message || 'Account created successfully!'\n      };\n    } catch (error) {\n      console.error('Registration error:', error);\n      if (error.response) {\n        var _error$response$data2;\n        // Server responded with error status\n        const status = error.response.status;\n        const detail = (_error$response$data2 = error.response.data) === null || _error$response$data2 === void 0 ? void 0 : _error$response$data2.detail;\n        if (status === 400) {\n          // Bad request - validation error or email exists\n          return {\n            success: false,\n            error: detail || 'Please check your input and try again.'\n          };\n        } else if (status === 500) {\n          // Server error\n          return {\n            success: false,\n            error: detail || 'Server error. Please try again later.'\n          };\n        } else {\n          return {\n            success: false,\n            error: detail || 'Registration failed. Please try again.'\n          };\n        }\n      } else if (error.request) {\n        // Network error\n        return {\n          success: false,\n          error: 'Network error. Please check your internet connection and try again.'\n        };\n      } else {\n        // Other error\n        return {\n          success: false,\n          error: 'An unexpected error occurred. Please try again.'\n        };\n      }\n    }\n  }\n  logout() {\n    if (this.sessionId) {\n      // Call logout API to remove session from database\n      authAPI.logout(this.sessionId).catch(err => {\n        console.error('Logout API error:', err);\n        // Don't show error to user for logout\n      });\n    }\n    this.clearSession();\n    window.location.href = '/login';\n  }\n  setSession(sessionId, user) {\n    this.sessionId = sessionId;\n    this.user = user;\n    localStorage.setItem('session_id', sessionId);\n    localStorage.setItem('user', JSON.stringify(user));\n  }\n  clearSession() {\n    this.sessionId = null;\n    this.user = null;\n    localStorage.removeItem('session_id');\n    localStorage.removeItem('user');\n  }\n  isAuthenticated() {\n    return !!this.sessionId;\n  }\n  getSessionId() {\n    return this.sessionId;\n  }\n  getUser() {\n    return this.user;\n  }\n  async verifySession() {\n    if (!this.sessionId) return false;\n    try {\n      const response = await authAPI.verifySession(this.sessionId);\n      if (response.data.user) {\n        // Update user data if needed\n        this.user = response.data.user;\n        localStorage.setItem('user', JSON.stringify(this.user));\n        return true;\n      }\n      return false;\n    } catch (error) {\n      console.error('Session verification failed:', error);\n      this.clearSession();\n      return false;\n    }\n  }\n}\nconst authService = new AuthService();\nexport default authService;","map":{"version":3,"names":["authAPI","AuthService","constructor","sessionId","localStorage","getItem","user","JSON","parse","oldSessionId","setItem","removeItem","login","email","password","success","error","includes","response","trim","session_id","message","data","setSession","console","_error$response$data","status","detail","request","register","userData","length","_error$response$data2","logout","catch","err","clearSession","window","location","href","stringify","isAuthenticated","getSessionId","getUser","verifySession","authService"],"sources":["/Users/apple/Desktop/HOGIST PROJECT/Social_media_automation_final_igfb/frontend/src/services/auth.js"],"sourcesContent":["import { authAPI } from './api';\n\nclass AuthService {\n  constructor() {\n    // Check for both old and new session storage formats\n    this.sessionId = localStorage.getItem('session_id') || localStorage.getItem('sessionId');\n    this.user = JSON.parse(localStorage.getItem('user') || 'null');\n    \n    // If we found an old format, migrate it\n    if (!localStorage.getItem('session_id') && localStorage.getItem('sessionId')) {\n      const oldSessionId = localStorage.getItem('sessionId');\n      localStorage.setItem('session_id', oldSessionId);\n      localStorage.removeItem('sessionId');\n    }\n  }\n\n  async login(email, password) {\n    try {\n      // Basic client-side validation\n      if (!email || !password) {\n        return { \n          success: false, \n          error: 'Please enter both email and password.' \n        };\n      }\n\n      if (!email.includes('@')) {\n        return { \n          success: false, \n          error: 'Please enter a valid email address.' \n        };\n      }\n\n      const response = await authAPI.login({ email: email.trim(), password });\n      const { session_id, user, message } = response.data;\n      \n      this.setSession(session_id, user);\n      return { \n        success: true, \n        user, \n        message: message || 'Login successful!' \n      };\n    } catch (error) {\n      console.error('Login error:', error);\n      \n      if (error.response) {\n        // Server responded with error status\n        const status = error.response.status;\n        const detail = error.response.data?.detail;\n        \n        if (status === 401) {\n          // Unauthorized - wrong credentials\n          return { \n            success: false, \n            error: detail || 'Invalid email or password.' \n          };\n        } else if (status === 400) {\n          // Bad request - validation error\n          return { \n            success: false, \n            error: detail || 'Please check your input and try again.' \n          };\n        } else if (status === 500) {\n          // Server error\n          return { \n            success: false, \n            error: detail || 'Server error. Please try again later.' \n          };\n        } else {\n          return { \n            success: false, \n            error: detail || 'Login failed. Please try again.' \n          };\n        }\n      } else if (error.request) {\n        // Network error\n        return { \n          success: false, \n          error: 'Network error. Please check your internet connection and try again.' \n        };\n      } else {\n        // Other error\n        return { \n          success: false, \n          error: 'An unexpected error occurred. Please try again.' \n        };\n      }\n    }\n  }\n\n  async register(userData) {\n    try {\n      // Basic client-side validation\n      if (!userData.email || !userData.password) {\n        return { \n          success: false, \n          error: 'Please enter both email and password.' \n        };\n      }\n\n      if (!userData.email.includes('@')) {\n        return { \n          success: false, \n          error: 'Please enter a valid email address.' \n        };\n      }\n\n      if (userData.password.length < 6) {\n        return { \n          success: false, \n          error: 'Password must be at least 6 characters long.' \n        };\n      }\n\n      const response = await authAPI.register({\n        email: userData.email.trim(),\n        password: userData.password\n      });\n      const { session_id, user, message } = response.data;\n      \n      this.setSession(session_id, user);\n      return { \n        success: true, \n        user, \n        message: message || 'Account created successfully!' \n      };\n    } catch (error) {\n      console.error('Registration error:', error);\n      \n      if (error.response) {\n        // Server responded with error status\n        const status = error.response.status;\n        const detail = error.response.data?.detail;\n        \n        if (status === 400) {\n          // Bad request - validation error or email exists\n          return { \n            success: false, \n            error: detail || 'Please check your input and try again.' \n          };\n        } else if (status === 500) {\n          // Server error\n          return { \n            success: false, \n            error: detail || 'Server error. Please try again later.' \n          };\n        } else {\n          return { \n            success: false, \n            error: detail || 'Registration failed. Please try again.' \n          };\n        }\n      } else if (error.request) {\n        // Network error\n        return { \n          success: false, \n          error: 'Network error. Please check your internet connection and try again.' \n        };\n      } else {\n        // Other error\n        return { \n          success: false, \n          error: 'An unexpected error occurred. Please try again.' \n        };\n      }\n    }\n  }\n\n  logout() {\n    if (this.sessionId) {\n      // Call logout API to remove session from database\n      authAPI.logout(this.sessionId).catch(err => {\n        console.error('Logout API error:', err);\n        // Don't show error to user for logout\n      });\n    }\n    this.clearSession();\n    window.location.href = '/login';\n  }\n\n  setSession(sessionId, user) {\n    this.sessionId = sessionId;\n    this.user = user;\n    localStorage.setItem('session_id', sessionId);\n    localStorage.setItem('user', JSON.stringify(user));\n  }\n\n  clearSession() {\n    this.sessionId = null;\n    this.user = null;\n    localStorage.removeItem('session_id');\n    localStorage.removeItem('user');\n  }\n\n  isAuthenticated() {\n    return !!this.sessionId;\n  }\n\n  getSessionId() {\n    return this.sessionId;\n  }\n\n  getUser() {\n    return this.user;\n  }\n\n  async verifySession() {\n    if (!this.sessionId) return false;\n    \n    try {\n      const response = await authAPI.verifySession(this.sessionId);\n      if (response.data.user) {\n        // Update user data if needed\n        this.user = response.data.user;\n        localStorage.setItem('user', JSON.stringify(this.user));\n        return true;\n      }\n      return false;\n    } catch (error) {\n      console.error('Session verification failed:', error);\n      this.clearSession();\n      return false;\n    }\n  }\n}\n\nconst authService = new AuthService();\nexport default authService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}