{"ast":null,"code":"import{useState,useEffect,createContext,useContext}from'react';import authService from'../services/auth';import{jsx as _jsx}from\"react/jsx-runtime\";const AuthContext=/*#__PURE__*/createContext();export const AuthProvider=_ref=>{let{children}=_ref;const[user,setUser]=useState(authService.getUser());const[isAuthenticated,setIsAuthenticated]=useState(authService.isAuthenticated());const[loading,setLoading]=useState(true);const[sessionError,setSessionError]=useState('');useEffect(()=>{const verifySession=async()=>{if(authService.isAuthenticated()){try{const isValid=await authService.verifySession();if(isValid){setUser(authService.getUser());setIsAuthenticated(true);setSessionError('');}else{// Session expired or invalid\nsetUser(null);setIsAuthenticated(false);setSessionError('Your session has expired. Please log in again.');authService.clearSession();}}catch(error){console.error('Session verification failed:',error);setUser(null);setIsAuthenticated(false);setSessionError('Session verification failed. Please log in again.');authService.clearSession();}}else{setUser(null);setIsAuthenticated(false);}setLoading(false);};verifySession();// Set up periodic session check (every 5 minutes)\nconst interval=setInterval(verifySession,5*60*1000);return()=>clearInterval(interval);},[]);const login=async(email,password)=>{try{const result=await authService.login(email,password);if(result.success){setUser(result.user);setIsAuthenticated(true);setSessionError('');}return result;}catch(error){console.error('Login error in useAuth:',error);return{success:false,error:'An unexpected error occurred during login.'};}};const register=async userData=>{try{const result=await authService.register(userData);if(result.success){setUser(result.user);setIsAuthenticated(true);setSessionError('');}return result;}catch(error){console.error('Registration error in useAuth:',error);return{success:false,error:'An unexpected error occurred during registration.'};}};const logout=()=>{try{authService.logout();setUser(null);setIsAuthenticated(false);setSessionError('');}catch(error){console.error('Logout error:',error);// Still log out locally even if API call fails\nsetUser(null);setIsAuthenticated(false);authService.clearSession();}};const clearSessionError=()=>{setSessionError('');};const value={user,isAuthenticated,loading,sessionError,login,register,logout,clearSessionError};return/*#__PURE__*/_jsx(AuthContext.Provider,{value:value,children:children});};export const useAuth=()=>{const context=useContext(AuthContext);if(!context){throw new Error('useAuth must be used within an AuthProvider');}return context;};","map":{"version":3,"names":["useState","useEffect","createContext","useContext","authService","jsx","_jsx","AuthContext","AuthProvider","_ref","children","user","setUser","getUser","isAuthenticated","setIsAuthenticated","loading","setLoading","sessionError","setSessionError","verifySession","isValid","clearSession","error","console","interval","setInterval","clearInterval","login","email","password","result","success","register","userData","logout","clearSessionError","value","Provider","useAuth","context","Error"],"sources":["/Users/apple/Desktop/HOGIST PROJECT/Social_media_automation_final_igfb/frontend/src/hooks/useAuth.js"],"sourcesContent":["import { useState, useEffect, createContext, useContext } from 'react';\nimport authService from '../services/auth';\n\nconst AuthContext = createContext();\n\nexport const AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(authService.getUser());\n  const [isAuthenticated, setIsAuthenticated] = useState(authService.isAuthenticated());\n  const [loading, setLoading] = useState(true);\n  const [sessionError, setSessionError] = useState('');\n\n  useEffect(() => {\n    const verifySession = async () => {\n      if (authService.isAuthenticated()) {\n        try {\n          const isValid = await authService.verifySession();\n          if (isValid) {\n            setUser(authService.getUser());\n            setIsAuthenticated(true);\n            setSessionError('');\n          } else {\n            // Session expired or invalid\n            setUser(null);\n            setIsAuthenticated(false);\n            setSessionError('Your session has expired. Please log in again.');\n            authService.clearSession();\n          }\n        } catch (error) {\n          console.error('Session verification failed:', error);\n          setUser(null);\n          setIsAuthenticated(false);\n          setSessionError('Session verification failed. Please log in again.');\n          authService.clearSession();\n        }\n      } else {\n        setUser(null);\n        setIsAuthenticated(false);\n      }\n      setLoading(false);\n    };\n\n    verifySession();\n\n    // Set up periodic session check (every 5 minutes)\n    const interval = setInterval(verifySession, 5 * 60 * 1000);\n    \n    return () => clearInterval(interval);\n  }, []);\n\n  const login = async (email, password) => {\n    try {\n      const result = await authService.login(email, password);\n      if (result.success) {\n        setUser(result.user);\n        setIsAuthenticated(true);\n        setSessionError('');\n      }\n      return result;\n    } catch (error) {\n      console.error('Login error in useAuth:', error);\n      return { \n        success: false, \n        error: 'An unexpected error occurred during login.' \n      };\n    }\n  };\n\n  const register = async (userData) => {\n    try {\n      const result = await authService.register(userData);\n      if (result.success) {\n        setUser(result.user);\n        setIsAuthenticated(true);\n        setSessionError('');\n      }\n      return result;\n    } catch (error) {\n      console.error('Registration error in useAuth:', error);\n      return { \n        success: false, \n        error: 'An unexpected error occurred during registration.' \n      };\n    }\n  };\n\n  const logout = () => {\n    try {\n      authService.logout();\n      setUser(null);\n      setIsAuthenticated(false);\n      setSessionError('');\n    } catch (error) {\n      console.error('Logout error:', error);\n      // Still log out locally even if API call fails\n      setUser(null);\n      setIsAuthenticated(false);\n      authService.clearSession();\n    }\n  };\n\n  const clearSessionError = () => {\n    setSessionError('');\n  };\n\n  const value = {\n    user,\n    isAuthenticated,\n    loading,\n    sessionError,\n    login,\n    register,\n    logout,\n    clearSessionError\n  };\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}